{"ast":null,"code":"var _jsxFileName = \"/home/addmanrcace/websites/addison.codes/abl/src/context/books/BookState.js\";\nimport React, { useReducer, useContext } from 'react';\nimport axios from 'axios';\nimport BookContext from './bookContext';\nimport BookReducer from './bookReducer';\nimport AlertContext from '../alert/alertContext';\nimport xml2js from 'xml2js';\nimport { SEARCH_BOOKS, GET_BOOKS, ADD_BOOK, SET_LOADING, CLEAR_SEARCH, DELETE_BOOK } from '../types';\n\nconst BookState = props => {\n  const alertState = useContext(AlertContext);\n  const initialState = {\n    books: [],\n    book: {},\n    collection: [],\n    loading: false\n  };\n  const key = 'e3tRV8bBX3V9UzUCLr0A';\n  const [state, dispatch] = useReducer(BookReducer, initialState); // Search Books\n\n  const searchBooks = async text => {\n    setLoading();\n    const xml = await axios.get(`https://cors-anywhere.herokuapp.com/https://www.goodreads.com/search/index.xml?key=${key}&q=${text}`);\n    xml2js.parseString(xml.data, {\n      explicitArray: false\n    }, (err, res) => {\n      if (err) {\n        alertState.setAlert(err, 'red');\n      } else {\n        const bookData = res.GoodreadsResponse.search.results.work;\n        const searchedBooks = bookData.map(book => ({\n          id: book.id._,\n          title: book.best_book.title,\n          author: book.best_book.author.name,\n          img: book.best_book.image_url,\n          year: book.original_publication_year._,\n          rating: book.average_rating\n        }));\n        dispatch({\n          type: SEARCH_BOOKS,\n          payload: searchedBooks\n        });\n      }\n    });\n  }; // Get books for collection\n\n\n  const getBooks = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/api/books');\n      dispatch({\n        type: GET_BOOKS,\n        payload: res.data\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Add book\n\n\n  const addBook = async book => {\n    setLoading();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('http://localhost:5000/api/books', book, config);\n      dispatch({\n        type: ADD_BOOK,\n        payload: res.data\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Delete book from collection\n\n\n  const deleteBook = async id => {\n    try {\n      await axios.delete(`/api/books/${id}`);\n      dispatch({\n        type: DELETE_BOOK,\n        payload: id\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }; // Clear search\n\n\n  const clearSearch = () => dispatch({\n    type: CLEAR_SEARCH\n  }); // Set loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return /*#__PURE__*/React.createElement(BookContext.Provider, {\n    value: {\n      books: state.books,\n      loading: state.loading,\n      collection: state.collection,\n      searchBooks,\n      getBooks,\n      addBook,\n      setLoading,\n      clearSearch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default BookState;","map":{"version":3,"sources":["/home/addmanrcace/websites/addison.codes/abl/src/context/books/BookState.js"],"names":["React","useReducer","useContext","axios","BookContext","BookReducer","AlertContext","xml2js","SEARCH_BOOKS","GET_BOOKS","ADD_BOOK","SET_LOADING","CLEAR_SEARCH","DELETE_BOOK","BookState","props","alertState","initialState","books","book","collection","loading","key","state","dispatch","searchBooks","text","setLoading","xml","get","parseString","data","explicitArray","err","res","setAlert","bookData","GoodreadsResponse","search","results","work","searchedBooks","map","id","_","title","best_book","author","name","img","image_url","year","original_publication_year","rating","average_rating","type","payload","getBooks","console","log","addBook","config","headers","post","deleteBook","delete","clearSearch","children"],"mappings":"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","sourcesContent":["import React, { useReducer, useContext } from 'react';\nimport axios from 'axios';\nimport BookContext from './bookContext';\nimport BookReducer from './bookReducer';\nimport AlertContext from '../alert/alertContext';\nimport xml2js from 'xml2js';\nimport { SEARCH_BOOKS, GET_BOOKS, ADD_BOOK, SET_LOADING, CLEAR_SEARCH, DELETE_BOOK } from '../types';\n\nconst BookState = props => {\n  const alertState = useContext(AlertContext);\n\n  const initialState = {\n    books: [],\n    book: {},\n    collection: [],\n    loading: false,\n  };\n\n  const key = 'e3tRV8bBX3V9UzUCLr0A';\n\n  const [state, dispatch] = useReducer(BookReducer, initialState);\n\n  // Search Books\n  const searchBooks = async text => {\n    setLoading();\n    const xml = await axios.get(`https://cors-anywhere.herokuapp.com/https://www.goodreads.com/search/index.xml?key=${key}&q=${text}`);\n    xml2js.parseString(\n      xml.data,\n      {\n        explicitArray: false,\n      },\n      (err, res) => {\n        if (err) {\n          alertState.setAlert(err, 'red');\n        } else {\n          const bookData = res.GoodreadsResponse.search.results.work;\n          const searchedBooks = bookData.map(book => ({\n            id: book.id._,\n            title: book.best_book.title,\n            author: book.best_book.author.name,\n            img: book.best_book.image_url,\n            year: book.original_publication_year._,\n            rating: book.average_rating,\n          }));\n          dispatch({ type: SEARCH_BOOKS, payload: searchedBooks });\n        }\n      }\n    );\n  };\n\n  // Get books for collection\n  const getBooks = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/api/books');\n      dispatch({\n        type: GET_BOOKS,\n        payload: res.data,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // Add book\n  const addBook = async book => {\n    setLoading();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    try {\n      const res = await axios.post('http://localhost:5000/api/books', book, config);\n      dispatch({ type: ADD_BOOK, payload: res.data });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // Delete book from collection\n  const deleteBook = async id => {\n    try {\n      await axios.delete(`/api/books/${id}`);\n      dispatch({\n        type: DELETE_BOOK,\n        payload: id,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // Clear search\n  const clearSearch = () => dispatch({ type: CLEAR_SEARCH });\n\n  // Set loading\n  const setLoading = () => dispatch({ type: SET_LOADING });\n\n  return (\n    <BookContext.Provider\n      value={{\n        books: state.books,\n        loading: state.loading,\n        collection: state.collection,\n        searchBooks,\n        getBooks,\n        addBook,\n        setLoading,\n        clearSearch,\n      }}\n    >\n      {props.children}\n    </BookContext.Provider>\n  );\n};\n\nexport default BookState;\n"]},"metadata":{},"sourceType":"module"}